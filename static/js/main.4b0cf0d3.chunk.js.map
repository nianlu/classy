{"version":3,"sources":["container/Nav.js","container/SeatManagement.js","container/Body.js","container/App.js","serviceWorker.js","index.js"],"names":["Nav","props","console","log","act","react_default","a","createElement","className","role","aria-label","href","id","onClick","onAct","SeatManagement","Array","fill","map","_","i","key","j","Body","container_SeatManagement","App","_useState","useState","_useState2","Object","slicedToArray","active","setActive","container_Nav","container_Body","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QA0DeA,MAvDf,SAAaC,GAIX,OAHAC,QAAQC,IAAI,OACZD,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMG,KAEhBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,KAAK,aAAaC,aAAW,mBACnDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBG,KAAK,KAAzC,WAEFN,EAAAC,EAAAC,cAAA,OAAKK,GAAG,qBAAqBJ,UAAU,eACrCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAyB,IAAdP,EAAMG,IAAW,uBAAyB,cAAeS,QAAS,kBAAMZ,EAAMa,MAAM,KAAlG,oBAIAT,EAAAC,EAAAC,cAAA,KAAGC,UAAyB,IAAdP,EAAMG,IAAW,uBAAyB,cAAeS,QAAS,kBAAMZ,EAAMa,MAAM,KAAlG,sBAIAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,SAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,sBAONH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,uBC5BCO,MAhBf,WACE,OACIV,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,aACCS,MAAM,GAAGC,OAAOC,IAAI,SAACC,EAAEC,GAAH,OACnBf,EAAAC,EAAAC,cAAA,MAAIc,IAAK,IAAID,GACVJ,MAAM,IAAIC,OAAOC,IAAI,SAACC,EAAEG,GAAH,OACpBjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQa,IAAK,IAAID,EAAKE,GAApC,SAA8CF,EAA9C,KAAmDE,WCSlDC,MAbf,SAActB,GAEZ,OADAC,QAAQC,IAAIF,GAEVI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACE,IAAdP,EAAMG,KACLC,EAAAC,EAAAC,cAACiB,EAAD,SCMKC,MAXf,WAAe,IAAAC,EACeC,mBAAS,GADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAEb,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAAK7B,IAAK2B,EAAQjB,MAAOkB,IAEzB3B,EAAAC,EAAAC,cAAC2B,EAAD,CAAM9B,IAAK2B,MCAGI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b0cf0d3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Nav.sass';\n\nfunction Nav(props) {\n  console.log('nav');\n  console.log(props);\n  console.log(props.act);\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <a className=\"navbar-item subtitle\" href=\"#\">Classy</a>\n      </div>\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <a className={props.act === 1? \"navbar-item c-active\" : \"navbar-item\"} onClick={() => props.onAct(1)}>\n            Layout Selection\n          </a>\n    \n          <a className={props.act === 2? \"navbar-item c-active\" : \"navbar-item\"} onClick={() => props.onAct(2)}>\n            Teaching Assistant\n          </a>\n    \n          <div className=\"navbar-item has-dropdown is-hoverable\">\n            <a className=\"navbar-link\">\n              More\n            </a>\n    \n            <div className=\"navbar-dropdown\">\n              <a className=\"navbar-item\">\n                About\n              </a>\n              <a className=\"navbar-item\">\n                Contact\n              </a>\n              <hr className=\"navbar-divider\" />\n              <a className=\"navbar-item\">\n                Report an issue\n              </a>\n            </div>\n          </div>\n        </div>\n  \n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <div className=\"buttons\">\n              <a className=\"button is-light\">\n                Log in\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nfunction SeatManagement() {\n  return (\n      <table className=\"table is-bordered\">\n        <tbody>\n        {Array(8).fill().map((_,i) =>\n          <tr key={'r'+i}>\n            {Array(10).fill().map((_,j) =>\n              <td className=\"c-box\" key={'s'+i+''+j}>Seat R{i} C{j}</td>\n            )}\n          </tr>\n        )}\n        </tbody>\n      </table>\n  );\n}\n\nexport default SeatManagement;\n","import React, { useState } from 'react';\nimport './Body.sass';\n\nimport SeatManagement from './SeatManagement';\n\nfunction Body(props) {\n  console.log(props);\n  return (\n    <div className=\"body\">\n      <div className=\"container\">\n        {props.act === 1 &&\n          <SeatManagement />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { useState } from 'react';\nimport './App.sass';\n\nimport Nav from './Nav';\nimport Body from './Body';\n\nfunction App() {\n  const [active, setActive] = useState(1);\n  return (\n    <div>\n      <Nav act={active} onAct={setActive} />\n\n      <Body act={active}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}