{"version":3,"sources":["container/Nav.js","container/SeatManagement.js","container/Body.js","container/App.js","serviceWorker.js","index.js"],"names":["Nav","props","console","log","act","react_default","a","createElement","className","role","aria-label","href","id","onClick","onAct","localStorage","setItem","JSON","stringify","Array","fill","useStateWithLocalStorage","localStorageKey","defaultValue","arguments","length","undefined","_React$useState","React","useState","parse","getItem","_React$useState2","Object","slicedToArray","value","setValue","valueString","useEffect","SeatManagement","_useStateWithLocalSto","_useStateWithLocalSto2","_useStateWithLocalSto3","_useStateWithLocalSto4","students","setStudents","_React$useState3","_React$useState4","newName","setNewName","_useStateWithLocalSto5","_useStateWithLocalSto6","tables","setTables","onChangeTable","i","j","map","row","rownum","col","colnum","s","key","aria-hidden","placeholder","onChange","e","target","concat","toConsumableArray","r","t","Body","container_SeatManagement","App","_useState","_useState2","active","setActive","container_Nav","container_Body","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.696aed7b.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react';\nimport './Nav.sass';\n\nfunction Nav(props) {\n  console.log('nav');\n  console.log(props);\n  console.log(props.act);\n  const reset = () => {\n    localStorage.setItem('myValueInLocalStorage', JSON.stringify('test'));\n    localStorage.setItem('students', JSON.stringify([]));\n    localStorage.setItem('tables', JSON.stringify(Array(10).fill(Array(12).fill(false))));\n  }\n\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <a className=\"navbar-item subtitle\" href=\"./\">Classy</a>\n      </div>\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <a className={props.act === 1? \"navbar-item c-active\" : \"navbar-item\"} onClick={() => props.onAct(1)}>\n            Layout Selection\n          </a>\n    \n          <a className={props.act === 2? \"navbar-item c-active\" : \"navbar-item\"} onClick={() => props.onAct(2)}>\n            Teaching Assistant\n          </a>\n    \n          <div className=\"navbar-item has-dropdown is-hoverable\">\n            <a className=\"navbar-link\">\n              More\n            </a>\n    \n            <div className=\"navbar-dropdown\">\n              <a className=\"navbar-item\">\n                About\n              </a>\n              <a className=\"navbar-item\">\n                Contact\n              </a>\n              <hr className=\"navbar-divider\" />\n              <a className=\"navbar-item\">\n                Report an issue\n              </a>\n            </div>\n          </div>\n        </div>\n  \n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <div className=\"buttons\">\n              <a className=\"button is-light\" onClick={() => reset()} href='/'>\n                Reset\n              </a>\n              <a className=\"button is-light\">\n                Log in\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nconst useStateWithLocalStorage = (localStorageKey, defaultValue='') => {\n  // console.log('key', localStorageKey);\n  // console.log('value', defaultValue);\n  // console.log(localStorage.getItem(localStorageKey));\n\n  const [value, setValue] = React.useState(\n    JSON.parse(localStorage.getItem(localStorageKey)) || defaultValue\n  );\n\n  // console.log('localvalue', value);\n\n  const valueString = JSON.stringify(value);\n\n  React.useEffect(() => {\n    localStorage.setItem(localStorageKey, valueString);\n  }, [value]);\n\n  return [value, setValue];\n};\n\nfunction SeatManagement() {\n  // localStorage.setItem('myValueInLocalStorage', JSON.stringify('test'));\n  // localStorage.setItem('students', JSON.stringify(['cc']));\n\n  const [value, setValue] = useStateWithLocalStorage('myValueInLocalStorage');\n  const onChange = event => setValue(event.target.value);\n\n  const [students, setStudents] = useStateWithLocalStorage('students', ['TestStudent']);\n  const [newName, setNewName] = React.useState('');\n\n  const [tables, setTables] = useStateWithLocalStorage('tables', Array(10).fill(Array(12).fill()));\n  const onChangeTable = (i, j, value) => \n    setTables(tables.map((row, rownum) => \n      (rownum === i)?\n        row.map((col, colnum) => \n          (colnum === j)?\n            value\n            :\n            col\n        )\n        :\n        row\n    ));\n\n  // const tables = Array(10).fill(Array(12).fill());\n\n  // console.log('table', tables);\n\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-2\">\n        {/* <input className=\"text\" value={value} onChange={onChange}></input> */}\n        <nav className=\"panel\">\n          <p className=\"panel-heading\">\n            Students\n          </p>\n          {/* <div className=\"panel-block\">\n            <p className=\"control has-icons-left\">\n              <input className=\"input is-small\" type=\"text\" placeholder=\"search\" />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-search\" aria-hidden=\"true\"></i>\n              </span>\n            </p>\n          </div> */}\n          {students.map((s, i) => \n            <a className=\"panel-block\" key={i}>\n              <span className=\"panel-icon\">\n                <i className=\"fas fa-book\" aria-hidden=\"true\"></i>\n              </span>\n              {s}\n            </a>\n          )}\n          <div className=\"panel-block\">\n            <input className=\"input\" placeholder=\"name\" value={newName} onChange={e => setNewName(e.target.value)}></input>\n            <button className=\"button is-link is-outlined\" onClick={() => {setStudents([...students, newName]);setNewName('');}}>+</button>\n            {/* <button className=\"button is-link is-outlined is-fullwidth\" onClick={() => setStudents([...students, 'new'])}> add </button> */}\n          </div>\n        </nav>\n      </div>\n      <div className=\"column\">\n        <table className=\"table is-bordered\">\n          <tbody>\n          {tables.map((r,i) =>\n            <tr key={'r'+i}>\n              {r.map((t,j) =>\n                // <td className=\"c-box\" key={'s'+i+''+j}>Seat R{i} C{j}</td>\n                <td className=\"c-td\" key={'s'+i+''+j}>\n                  {t?\n                    <div className=\"box c-box c-selected\" onClick={() => onChangeTable(i, j, false)}>Selected</div>\n                  :\n                    <div className=\"box c-box\" onClick={() => onChangeTable(i, j, true)}>Empty</div>\n                  }\n                </td>\n              )}\n            </tr>\n          )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default SeatManagement;\n","import React, { useState } from 'react';\nimport './Body.sass';\n\nimport SeatManagement from './SeatManagement';\n\nfunction Body(props) {\n  console.log(props);\n  return (\n    <div className=\"body\">\n      <div className=\"container\">\n        {props.act === 1 &&\n          <SeatManagement />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { useState } from 'react';\nimport './App.sass';\n\nimport Nav from './Nav';\nimport Body from './Body';\n\nfunction App() {\n  const [active, setActive] = useState(1);\n  return (\n    <div>\n      <Nav act={active} onAct={setActive} />\n\n      <Body act={active}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}