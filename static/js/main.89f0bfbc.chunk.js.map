{"version":3,"sources":["container/Nav.js","container/Body.js","container/App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","class","role","aria-label","className","href","id","Body","Array","fill","map","_","i","j","App","container_Nav","container_Body","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAsDeA,MApDf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAASC,KAAK,aAAaC,aAAW,mBAC/CL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACfN,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,uBAAuBI,KAAK,KAArC,WAEFP,EAAAC,EAAAC,cAAA,OAAKM,GAAG,qBAAqBL,MAAM,eACjCH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,oBAIAH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,sBAIAH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,yCACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,QAIAH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,mBACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,SAGAH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,WAGAH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,mBACVH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAT,sBAONH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,mBAAT,uBCrBCM,MAlBf,WACE,OACET,EAAAC,EAAAC,cAAA,QAAMI,UAAU,QACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACfN,EAAAC,EAAAC,cAAA,SAAOI,UAAU,qBACdI,MAAM,IAAIC,OAAOC,IAAI,SAACC,EAAEC,GAAH,OACpBd,EAAAC,EAAAC,cAAA,UACGQ,MAAM,IAAIC,OAAOC,IAAI,SAACC,EAAEE,GAAH,OACpBf,EAAAC,EAAAC,cAAA,MAAII,UAAU,SAAd,SAA6BQ,EAA7B,KAAkCC,YCKjCC,MAVf,WACE,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MAEAjB,EAAAC,EAAAC,cAACgB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.89f0bfbc.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Nav() {\n  return (\n    <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"container\">\n      <div class=\"navbar-brand\">\n        <a class=\"navbar-item subtitle\" href=\"#\">Classy</a>\n      </div>\n      <div id=\"navbarBasicExample\" class=\"navbar-menu\">\n        <div class=\"navbar-start\">\n          <a class=\"navbar-item\">\n            Layout Selection\n          </a>\n    \n          <a class=\"navbar-item\">\n            Teaching Assistant\n          </a>\n    \n          <div class=\"navbar-item has-dropdown is-hoverable\">\n            <a class=\"navbar-link\">\n              More\n            </a>\n    \n            <div class=\"navbar-dropdown\">\n              <a class=\"navbar-item\">\n                About\n              </a>\n              <a class=\"navbar-item\">\n                Contact\n              </a>\n              <hr class=\"navbar-divider\" />\n              <a class=\"navbar-item\">\n                Report an issue\n              </a>\n            </div>\n          </div>\n        </div>\n  \n        <div class=\"navbar-end\">\n          <div class=\"navbar-item\">\n            <div class=\"buttons\">\n              <a class=\"button is-light\">\n                Log in\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './Body.sass';\n\nfunction Body() {\n  return (\n    <body className=\"body\">\n      <div className=\"container\">\n      <table className=\"table is-bordered\">\n        {Array(10).fill().map((_,i) =>\n          <tr>\n            {Array(16).fill().map((_,j) =>\n              <td className=\"c-box\">Seat R{i} C{j}</td>\n            )}\n          </tr>\n        )}\n      </table>\n      </div>\n    </body>\n  );\n}\n\nexport default Body;\n","import React from 'react';\nimport './App.sass';\n\nimport Nav from './Nav';\nimport Body from './Body';\n\nfunction App() {\n  return (\n    <div>\n      <Nav />\n\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}